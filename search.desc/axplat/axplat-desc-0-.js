searchState.loadedDescShard("axplat", 0, "axplat\nChecks that two strings are equal. If they are not equal, …\nCall the function decorated by <code>axplat::main</code> for the …\nCall the function decorated by <code>axplat::secondary_main</code> for …\nConsole input and output.\nSimple console print operation.\nSimple console print operation, with a newline.\nImplement the interface for a struct.\nPlatform initialization.\nInterrupt request (IRQ) handling.\nMarks a function to be called on the primary core after …\nPhysical memory information.\nPower management.\nMarks a function to be called on the secondary cores after …\nTime-related operations.\nConsole input and output interface.\nReads bytes from the console into the given mutable slice.\nReads bytes from the console into the given mutable slice.\nWrites given bytes to the console.\nWrites given bytes to the console.\nPlatform initialization interface.\nInitializes the platform at the early stage for the …\nInitializes the platform at the early stage for the …\nInitializes the platform at the early stage for secondary …\nInitializes the platform at the early stage for secondary …\nInitializes the platform at the later stage for the …\nInitializes the platform at the later stage for the …\nInitializes the platform at the later stage for secondary …\nInitializes the platform at the later stage for secondary …\nA lock-free table of event handlers.\nThe type if an IRQ handler.\nIRQ management interface.\nReturns the argument unchanged.\nHandles the IRQ.\nHandles the IRQ.\nHandles the event with the given index.\nCalls <code>U::from(self)</code>.\nCreates a new handler table with all entries empty.\nRegisters an IRQ handler for the given IRQ.\nRegisters an IRQ handler for the given IRQ.\nRegisters a handler for the given index.\nEnables or disables the given IRQ.\nEnables or disables the given IRQ.\nUnregisters the IRQ handler for the given IRQ.\nUnregisters the IRQ handler for the given IRQ.\nUnregisters the handler for the given index.\nThe default flags for a MMIO region (readable, writable, …\nThe default flags for a normal memory region (readable, …\nThe default flags for a reserved memory region (readable, …\nDevice memory. (e.g., MMIO regions)\nExecutable.\nFree memory for allocation.\nPhysical memory interface.\nThe flags of a physical memory region.\nThe error type for overlapping check.\nA physical memory region.\nReadable.\nReserved memory, do not use for allocation.\nThe raw memory range with start and size.\nUncachable memory. (e.g., framebuffer)\nWritable.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nChecks if the given ranges are overlapping.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe region flags, see <code>MemRegionFlags</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nReturns all device memory (MMIO) ranges on the platform.\nReturns all device memory (MMIO) ranges on the platform.\nThe region name, used for identification.\nCreates a MMIO region with default flags (readable, …\nCreates a RAM region with default flags (readable, …\nCreates a reserved memory region with default flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe start physical address of the region.\nReturns all physical memory (RAM) ranges on the platform.\nReturns all physical memory (RAM) ranges on the platform.\nRemoves a portion of ranges from the given ranges.\nThe intersection of a source flags value with the …\nReturns all reserved physical memory ranges on the …\nReturns all reserved physical memory ranges on the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe size in bytes of the region.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns the total size of physical memory (RAM) on the …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nPower management interface.\nBootstraps the given CPU core with the given initial stack …\nBootstraps the given CPU core with the given initial stack …\nShutdown the whole system.\nShutdown the whole system.\nA <code>Duration</code> type to represent a span of time, typically …\nThe maximum duration.\nThe duration of one microsecond.\nNumber of microseconds in a second.\nThe duration of one millisecond.\nNumber of milliseconds in a second.\nThe duration of one nanosecond.\nNumber of nanoseconds in a microsecond.\nNumber of nanoseconds in a millisecond.\nNumber of nanoseconds in a second.\nThe duration of one second.\nTime-related interfaces.\nA measurement of the system clock.\nA duration of zero time.\nComputes the absolute difference between <code>self</code> and <code>other</code>.\nReturns the total number of whole microseconds contained …\nReturns the total number of whole milliseconds contained …\nReturns the number of milliseconds contained by this …\nReturns the number of milliseconds contained by this …\nReturns the total number of nanoseconds contained by this …\nReturns the number of <em>whole</em> seconds contained by this …\nReturns the number of seconds contained by this <code>Duration</code> …\nReturns the number of seconds contained by this <code>Duration</code> …\nBusy waiting for the given duration.\nBusy waiting until reaching the given deadline.\nChecked <code>Duration</code> addition. Computes <code>self + other</code>, …\nChecked <code>Duration</code> division. Computes <code>self / other</code>, …\nChecked <code>Duration</code> multiplication. Computes <code>self * other</code>, …\nChecked <code>Duration</code> subtraction. Computes <code>self - other</code>, …\nReturns the current clock time in hardware ticks.\nReturns the current clock time in hardware ticks.\nDivides <code>Duration</code> by <code>Duration</code> and returns <code>f32</code>.\nDivides <code>Duration</code> by <code>Duration</code> and returns <code>f64</code>.\nDivides <code>Duration</code> by <code>f32</code>.\nDivides <code>Duration</code> by <code>f64</code>.\nReturn epoch offset in nanoseconds (wall time offset to …\nReturn epoch offset in nanoseconds (wall time offset to …\nReturns the argument unchanged.\nCreates a new <code>Duration</code> from the specified number of days.\nCreates a new <code>Duration</code> from the specified number of hours.\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of whole …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of weeks.\nCalls <code>U::from(self)</code>.\nReturns true if this <code>Duration</code> spans no time.\nReturns the time elapsed since system boot in <code>TimeValue</code>.\nReturns nanoseconds elapsed since system boot.\nMultiplies <code>Duration</code> by <code>f32</code>.\nMultiplies <code>Duration</code> by <code>f64</code>.\nConverts nanoseconds to hardware ticks.\nConverts nanoseconds to hardware ticks.\nCreates a new <code>Duration</code> from the specified number of whole …\nSaturating <code>Duration</code> addition. Computes <code>self + other</code>, …\nSaturating <code>Duration</code> multiplication. Computes <code>self * other</code>, …\nSaturating <code>Duration</code> subtraction. Computes <code>self - other</code>, …\nSet a one-shot timer.\nSet a one-shot timer.\nReturns the fractional part of this <code>Duration</code>, in whole …\nReturns the fractional part of this <code>Duration</code>, in whole …\nReturns the fractional part of this <code>Duration</code>, in …\nConverts hardware ticks to nanoseconds.\nConverts hardware ticks to nanoseconds.\nThe checked version of <code>from_secs_f32</code>.\nThe checked version of <code>from_secs_f64</code>.\nReturns the time elapsed since epoch (also known as …\nReturns nanoseconds elapsed since epoch (also known as …")